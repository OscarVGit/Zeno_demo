/*****PLEASE ENTER YOUR DETAILS BELOW*****/
-- ITO4132
--T5-ma-mods.sql

--Student ID:
--Student Name:

/* Comments for your marker:




*/



/* (a) */
-- (a) Monash Automotive (MA) would like to introduce a customer spare parts division where the parts which the business carries, and currently uses for vehicle services, can be sold directly to customers for their personal use (i.e. not connected to a service). 

-- The intention is to issue each customer who makes a spare parts purchase with an invoice of the form shown below. Mock data has been added to illustrate the contents of the form, note, that you are not required to add data as part of this task
-- Monash Automotive Spare Parts Sale Receipt
-- Customer No: 1456 	Customer Name & Address
-- Wile E Coyote
-- 123 Desert Chase
-- NeverEnding, Vic 3234 	

-- Sale No: 567

-- Sale Date: 01/07/2023

-- Customer Phone
-- 99032626

-- Parts Purchased
-- Part Code	Description	Unit Price	Qty	Amount
-- NOS999 	Nitrous Oxide System 	1450.00 	1 	1450.00
-- FDB605 	Ferodo Brake Pads 	45.00 	2 	90.00
  	  	  	  	 
  	  	  	  	 
--   	  	  	Total Paid 	1540.00

-- MA wish to record, for each sale made, the customer who made the purchase, the sale number (which should be auto-generated by the system, starting with 100), the date of the sale and the total paid for the sale, up to 99999.99. For a given sale, they wish to record for each part sold, the part code, the unit price that was charged (up to 9999.99) and the quantity of the part purchased, up to 99.

-- Change the database to allow MA to record these, non-service related, customer spare parts sales.

-- Create a new table called SparePartsSales with the following columns:
-- SaleNo (PK) - an auto-generated sale number starting at 100
-- SaleDate - the date of the sale
-- CustomerNo(FK) - the customer number of the customer who made the purchase
-- TotalPaid - the total amount paid for the sale, up to 99999.99

-- Create a new table called SparePartsSaleItems with the following columns:
-- SaleNo (PK) - the sale number of the sale to which this item belongs
-- PartCode (PK, FK) - the code of the part sold
-- UnitPrice(FK) - the unit price of the part sold, up to 9999.99
-- Quantity - the quantity of the part sold, up to 99

CREATE SEQUENCE sale_no_seq START WITH 100;

CREATE TABLE SparePartsSales(
    SaleNo INT DEFAULT sale_no_seq.NEXTVAL PRIMARY KEY,
    SaleDate DATE,
    CustomerNo INT REFERENCES CUSTOMER(CUST_NO),
    TotalPaid DECIMAL(5,2)
);

CREATE TABLE SparePartsSaleItems(
    SaleNo INT REFERENCES SparePartsSales(SaleNo),
    PartCode CHAR(6) REFERENCES PART(PART_CODE),
    UnitPrice DECIMAL(4,2),
    Quantity INT CHECK (Quantity <= 99),
    PRIMARY KEY (SaleNo, PartCode)
);


/* (b )*/

-- Monash Automotive is experiencing an issue where stocks of some parts are allowed to get unreasonably low and as a consequence cause cancellation of service jobs in the workshops. 

-- MA would like to include a re-order level for parts to indicate when a re-order is required. The spare parts staff will close each day with an SQL query which will list those parts which need to be ordered due to being below their re-order level (you do not need to provide this SQL as part of your solution). 
-- The output will be used to re-order those parts which have fallen below their restock level during the current day (MA order on a daily basis from their vendors). MA also wish to note the date at which a particular part was restocked, this is normally several days after the part was ordered. 
-- Your solution needs to deal with the fact that the parts staff need to be able to work out which part has been reordered already and which part needs ordering based on today's usage.

-- An analysis of the current part stock levels for all parts has resulted in a decision that this reorder stock level for a particular part should be set initially, for the current parts held, at half of the current stock of the part. 
-- For example, if the current stock level of ACFD22 "Sterling Air Cleaner Hose" is 5, the reorder level for ACFD22 should be set at 3 (ie. 2.5 rounded up). For this initial setup, you may set all parts restock date as 01 Jan 2024.

-- All new parts added to the parts table must be required to provide a re-order stock level which the user entering the data must assign, and a restocked date. This re-order stock level and restocked date are entered manually by the user adding the new part.

-- Change the database to satisfy this requirement.

-- Add a new column called ReorderLevel to the Parts table. This column should be a whole number, up to 99, which indicates the reorder level for the part.
-- Add a new column called RestockedDate to the Parts table. This column should be a date which indicates the date at which the part was restocked.

ALTER TABLE PART
ADD ReorderLevel INT DEFAULT 0 NOT NULL;

ALTER TABLE PART
ADD RestockedDate DATE DEFAULT DATE '2024-01-01' NOT NULL;
-- Now, we need to set the reorder level for the current parts in the Parts table, as described in the question.
-- We can do this by updating the Parts table with the reorder level for each part.
-- We can calculate the reorder level for each part by dividing the current stock level by 2 and rounding up.
-- We can then set the reorder level for each part in the Parts table.
-- We can set the restocked date for each part to 01 Jan 2024.

UPDATE PART
SET ReorderLevel = CEIL(PART_STOCK / 2),
RestockedDate = TO_DATE('2024-01-01', 'YYYY-MM-DD');





